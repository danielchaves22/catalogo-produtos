// backend/prisma/schema.prisma
// Schema simplificado sem referências a schemas específicos

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

// Modelos simplificados sem referências a schemas

model User {
  id        Int      @id @map("idv32")
  email     String   @unique @map("username")
  password  String   @map("senha")
  name      String   @map("nomecompleto")

  subUsuarios SubUsuario[]
  certificados Certificado[]
  mensagens    Mensagem[]
  importacoes  ImportacaoProduto[]
  ncmValoresPadrao NcmValoresPadrao[]

  @@map("comex")
}

model SubUsuario {
  id          Int   @id @default(autoincrement()) @map("Id")
  superUserId Int   @map("idv32_comex")
  email       String @unique @map("email")
  password    String @map("senha")

  superUser   User  @relation(fields: [superUserId], references: [id])

  @@map("comex_subsessoes")
}

model Certificado {
  id           Int    @id @default(autoincrement()) @map("id")
  superUserId  Int    @map("super_user_id")
  nome         String @map("nome")
  pfxPath      String @map("pfx_path")
  senha        String @map("senha")
  criadoEm     DateTime @default(now()) @map("criado_em")

  superUser    User    @relation(fields: [superUserId], references: [id])
  catalogos    Catalogo[]

  @@map("certificado")
}

model UsuarioCatalogo {
  id          Int      @id @default(autoincrement()) @map("id")
  legacyId    Int      @map("legacy_id")
  username    String   @unique @map("username")
  nome        String   @map("nome")
  superUserId Int      @map("super_user_id")
  role        String   @map("role")
  ultimoLogin DateTime @default(now()) @map("ultimo_login")
  criadoEm    DateTime @default(now()) @map("criado_em")
  atualizadoEm DateTime @updatedAt @map("atualizado_em")

  permissoes  UsuarioPermissao[]
  importacoes ImportacaoProduto[]

  @@map("usuario_catalogo")
}

model UsuarioPermissao {
  id                Int  @id @default(autoincrement()) @map("id")
  usuarioCatalogoId Int  @map("usuario_catalogo_id")
  codigo            String @map("codigo")

  usuario UsuarioCatalogo @relation(fields: [usuarioCatalogoId], references: [id])

  @@unique([usuarioCatalogoId, codigo], name: "uk_usuario_codigo")
  @@map("usuario_permissao")
}

enum Role {
  ADMIN
  SUPERUSER
  USER
}

enum CatalogoStatus {
  ATIVO
  INATIVO
}

enum CatalogoAmbiente {
  HOMOLOGACAO
  PRODUCAO
}

enum MensagemCategoria {
  ATUALIZACAO_SISCOMEX
  IMPORTACAO_CONCLUIDA
}

model Catalogo {
  id               Int            @id @default(autoincrement()) @map("id")
  nome             String         @map("nome")
  cpf_cnpj         String?        @map("cpf_cnpj")
  ultima_alteracao DateTime       @map("ultima_alteracao")
  numero           Int            @map("numero")
  status           CatalogoStatus @map("status")
  ambiente        CatalogoAmbiente @default(HOMOLOGACAO) @map("ambiente")
  superUserId      Int            @map("super_user_id")
  certificadoId   Int?           @map("certificado_id")
  certificado     Certificado?   @relation(fields: [certificadoId], references: [id])
  produtos         Produto[]
  operadoresEstrangeiros OperadorEstrangeiro[]
  importacoes      ImportacaoProduto[]

  @@unique([superUserId, cpf_cnpj], name: "uk_superuser_cpf_cnpj")
  @@map("catalogo")
}

model Mensagem {
  id          Int                @id @default(autoincrement()) @map("id")
  superUserId Int                @map("super_user_id")
  superUser   User               @relation(fields: [superUserId], references: [id])
  titulo      String             @map("titulo")
  conteudo    String             @map("conteudo")
  categoria   MensagemCategoria  @map("categoria")
  metadados   Json?              @map("metadados")
  lida        Boolean            @default(false) @map("lida")
  criadaEm    DateTime           @default(now()) @map("criada_em")
  lidaEm      DateTime?          @map("lida_em")

  @@map("mensagem")
  @@index([superUserId], map: "idx_mensagem_super_user_id")
  @@index([lida], map: "idx_mensagem_lida")
  @@index([criadaEm], map: "idx_mensagem_criada_em")
}

model Pais {
  codigo String @id @map("codigo")
  sigla  String @map("sigla")
  nome   String @map("nome")
  
  // Relacionamentos
  operadoresEstrangeiros OperadorEstrangeiro[]
  operadoresEstrangeiroProdutos OperadorEstrangeiroProduto[] @relation("PaisOperadorProduto")
  subdivisoes Subdivisao[] // Adicionado relacionamento com subdivisões
  
  @@map("pais")
}

model AgenciaEmissora {
  codigo String @id @map("codigo")
  sigla  String @map("sigla")
  nome   String @map("nome")
  
  // Relacionamentos
  identificacoesAdicionais IdentificacaoAdicional[]
  
  @@map("agencia_emissora")
}

model Subdivisao {
  codigo String @id @map("codigo")
  sigla  String @map("sigla")
  nome   String @map("nome")
  paisCodigo String @map("pais_codigo") // Adicionado vínculo com país
  
  // Relacionamentos
  pais Pais @relation(fields: [paisCodigo], references: [codigo])
  operadoresEstrangeiros OperadorEstrangeiro[]
  
  @@map("subdivisao")
}

// Tabela principal do Operador Estrangeiro
model OperadorEstrangeiro {
  id                  Int      @id @default(autoincrement()) @map("id")
  catalogoId          Int      @map("catalogo_id")

  // Dados básicos
  paisCodigo          String   @map("pais_codigo")
  tin                 String?  @map("tin") // Número de identificação (TIN)
  nome                String   @map("nome")
  email               String?  @map("email")
  codigoInterno       String?  @map("codigo_interno")

  // Endereço
  codigoPostal        String?  @map("codigo_postal")
  logradouro          String?  @map("logradouro")
  cidade              String?  @map("cidade")
  subdivisaoCodigo    String?  @map("subdivisao_codigo")

  // Controle do sistema
  codigo              String?  @map("codigo") // Código gerado pelo SISCOMEX
  versao              Int      @default(1) @map("versao")
  // Situação do operador: RASCUNHO (ainda não transmitido), ATIVADO (transmitido) ou DESATIVADO
  situacao            OperadorEstrangeiroStatus @default(RASCUNHO) @map("situacao")
  dataInclusao        DateTime @default(now()) @map("data_inclusao")
  dataUltimaAlteracao DateTime @updatedAt @map("data_ultima_alteracao")
  dataReferencia      DateTime? @map("data_referencia") // Para inclusão retroativa

  // Relacionamentos
  catalogo             Catalogo @relation(fields: [catalogoId], references: [id])
  pais                 Pais     @relation(fields: [paisCodigo], references: [codigo])
  subdivisao           Subdivisao? @relation(fields: [subdivisaoCodigo], references: [codigo])
  identificacoesAdicionais     IdentificacaoAdicional[]
  operadorEstrangeiroProdutos  OperadorEstrangeiroProduto[] @relation("OperadorProduto")

  @@index([catalogoId], name: "idx_catalogo_id")
  @@map("operador_estrangeiro")
}

// Tabela para identificações adicionais (DUNS, LEI, etc.)
model IdentificacaoAdicional {
  id                     Int      @id @default(autoincrement()) @map("id")
  operadorEstrangeiroId  Int      @map("operador_estrangeiro_id")
  numero                 String   @map("numero")
  agenciaEmissoraCodigo  String   @map("agencia_emissora_codigo")
  
  // Relacionamentos
  operadorEstrangeiro    OperadorEstrangeiro @relation(fields: [operadorEstrangeiroId], references: [id], onDelete: Cascade)
  agenciaEmissora        AgenciaEmissora @relation(fields: [agenciaEmissoraCodigo], references: [codigo])
  
  @@map("identificacao_adicional")
}

// Status possíveis para o operador estrangeiro
// RASCUNHO: operador em edição não transmitido ao PUCOMEX
// ATIVADO: operador transmitido ao PUCOMEX
// DESATIVADO: operador desativado no PUCOMEX
enum OperadorEstrangeiroStatus {
  RASCUNHO
  ATIVADO
  DESATIVADO
}

enum ImportacaoSituacao {
  EM_ANDAMENTO
  CONCLUIDA
}

enum ImportacaoResultado {
  PENDENTE
  SUCESSO
  ATENCAO
}

enum ImportacaoProdutoItemResultado {
  SUCESSO
  ATENCAO
  ERRO
}
// Enum de status de Produto
enum ProdutoStatus {
  PENDENTE
  APROVADO
  PROCESSANDO
  TRANSMITIDO
  ERRO
}

enum ProdutoSituacao {
  RASCUNHO
  ATIVADO
  DESATIVADO
}

// Tabela de cache de NCM
model NcmCache {
  id                   Int      @id @default(autoincrement()) @map("id")
  codigo               String   @unique @map("codigo")
  descricao            String?  @map("descricao")
  dataUltimaSincronizacao DateTime? @map("data_ultima_sincronizacao")
  hashEstrutura        String?  @map("hash_estrutura")
  versaoEstrutura      Int?     @map("versao_estrutura")
  unidadeMedida        String?  @map("unidade_medida")
  aliquotaIi           Decimal? @map("aliquota_ii")
  atributos            AtributosCache[] @relation("NcmAtributos")

  @@map("ncm_cache")
}

// Tabela de cache das estruturas de atributos
model AtributosCache {
  id                 Int      @id @default(autoincrement()) @map("id")
  ncmCodigo          String   @map("ncm_codigo")
  modalidade         String   @map("modalidade")
  estruturaJson      Json     @map("estrutura_json")
  dataSincronizacao  DateTime? @map("data_sincronizacao")
  versao             Int?     @map("versao")
  hashEstrutura      String?  @map("hash_estrutura")
  vigenciaInicio     DateTime? @map("vigencia_inicio")
  vigenciaFim        DateTime? @map("vigencia_fim")
  ncm                NcmCache @relation("NcmAtributos", fields: [ncmCodigo], references: [codigo])

  @@unique([ncmCodigo, modalidade, versao], name: "uk_ncm_modalidade_versao")
  @@map("atributos_cache")
}

// Tabela de produtos
model Produto {
  id                        Int               @id @default(autoincrement()) @map("id")
  codigo                    String?           @unique @map("codigo")
  versao                    Int               @map("versao")
  status                    ProdutoStatus     @map("status")
  situacao                 ProdutoSituacao    @default(RASCUNHO) @map("situacao")
  ncmCodigo                 String            @map("ncm_codigo")
  modalidade                String?           @map("modalidade")
  denominacao               String            @map("denominacao")
  descricao                 String            @map("descricao")
  numero                    Int               @unique @map("numero")
  catalogoId                Int               @map("catalogo_id")
  catalogo                  Catalogo          @relation(fields: [catalogoId], references: [id])
  criadoEm                  DateTime          @default(now()) @map("criado_em")
  atualizadoEm              DateTime          @updatedAt @map("atualizado_em")
  criadoPor                 String?           @map("criado_por")
  versaoEstruturaAtributos  Int?              @map("versao_estrutura_atributos")
  atributos                 ProdutoAtributos[]
  codigosInternos           CodigoInternoProduto[]
  operadoresEstrangeiros    OperadorEstrangeiroProduto[]
  importacaoItens           ImportacaoProdutoItem[] @relation("ProdutoImportacaoItens")

  @@index([ncmCodigo], name: "idx_ncm")
  @@index([catalogoId], name: "idx_catalogo")
  @@unique([codigo, versao], name: "uk_codigo_versao")
  @@map("produto")
}

// Tabela com valores de atributos dos produtos
model ProdutoAtributos {
  id                    Int       @id @default(autoincrement()) @map("id")
  produtoId             Int       @map("produto_id")
  valoresJson           Json      @map("valores_json")
  estruturaSnapshotJson Json?     @map("estrutura_snapshot_json")
  validadoEm            DateTime? @map("validado_em")
  errosValidacao        Json?     @map("erros_validacao")
  produto               Produto   @relation(fields: [produtoId], references: [id])

  @@map("produto_atributos")
}

model NcmValoresPadrao {
  id                    Int      @id @default(autoincrement()) @map("id")
  superUserId           Int      @map("super_user_id")
  ncmCodigo             String   @map("ncm_codigo")
  modalidade            String?  @map("modalidade")
  valoresJson           Json     @map("valores_json")
  estruturaSnapshotJson Json?    @map("estrutura_snapshot_json")
  criadoEm              DateTime @default(now()) @map("criado_em")
  atualizadoEm          DateTime @updatedAt @map("atualizado_em")
  criadoPor             String?  @map("criado_por")
  atualizadoPor         String?  @map("atualizado_por")

  superUser User @relation(fields: [superUserId], references: [id])

  @@unique([superUserId, ncmCodigo], name: "uk_superuser_ncm")
  @@map("ncm_valores_padrao")
}

model CodigoInternoProduto {
  id        Int     @id @default(autoincrement()) @map("id")
  produtoId Int     @map("produto_id")
  codigo    String  @map("codigo")
  produto   Produto @relation(fields: [produtoId], references: [id], onDelete: Cascade)

  @@unique([produtoId, codigo], name: "uk_produto_codigo")
  @@map("codigo_interno_produto")
}

model OperadorEstrangeiroProduto {
  id                    Int     @id @default(autoincrement()) @map("id")
  paisCodigo            String  @map("pais_codigo")
  conhecido             Boolean @map("conhecido")
  operadorEstrangeiroId Int?    @map("operador_estrangeiro_id")
  produtoId             Int     @map("produto_id")

  pais                  Pais                  @relation("PaisOperadorProduto", fields: [paisCodigo], references: [codigo])
  operadorEstrangeiro   OperadorEstrangeiro?  @relation("OperadorProduto", fields: [operadorEstrangeiroId], references: [id])
  produto               Produto               @relation(fields: [produtoId], references: [id], onDelete: Cascade)

  @@map("operador_estrangeiro_produto")
}

model ImportacaoProduto {
  id                 Int                 @id @default(autoincrement()) @map("id")
  superUserId        Int                 @map("super_user_id")
  usuarioCatalogoId  Int?                @map("usuario_catalogo_id")
  catalogoId         Int                 @map("catalogo_id")
  modalidade         String              @map("modalidade")
  nomeArquivo        String?             @map("nome_arquivo")
  situacao           ImportacaoSituacao  @default(EM_ANDAMENTO) @map("situacao")
  resultado          ImportacaoResultado @default(PENDENTE) @map("resultado")
  totalRegistros     Int                 @default(0) @map("total_registros")
  totalCriados       Int                 @default(0) @map("total_criados")
  totalComAtencao    Int                 @default(0) @map("total_com_atencao")
  totalComErro       Int                 @default(0) @map("total_com_erro")
  iniciadoEm         DateTime            @default(now()) @map("iniciado_em")
  finalizadoEm       DateTime?           @map("finalizado_em")

  superUser        User                @relation(fields: [superUserId], references: [id])
  catalogo         Catalogo         @relation(fields: [catalogoId], references: [id])
  usuarioCatalogo  UsuarioCatalogo? @relation(fields: [usuarioCatalogoId], references: [id])
  itens            ImportacaoProdutoItem[]

  @@index([superUserId], map: "idx_importacao_super_user")
  @@index([catalogoId], map: "idx_importacao_catalogo")
  @@map("importacao_produto")
}

model ImportacaoProdutoItem {
  id                   Int                               @id @default(autoincrement()) @map("id")
  importacaoId         Int                               @map("importacao_id")
  linhaPlanilha        Int                               @map("linha_planilha")
  ncm                  String?                           @map("ncm")
  denominacao          String?                           @map("denominacao")
  codigosInternos      String?                           @map("codigos_internos") @db.Text
  resultado            ImportacaoProdutoItemResultado    @map("resultado")
  mensagens            Json?                             @map("mensagens")
  possuiErroImpeditivo Boolean                           @default(false) @map("possui_erro_impeditivo")
  possuiAlerta         Boolean                           @default(false) @map("possui_alerta")
  produtoId            Int?                              @map("produto_id")
  criadoEm             DateTime                          @default(now()) @map("criado_em")

  importacao ImportacaoProduto @relation(fields: [importacaoId], references: [id], onDelete: Cascade)
  produto    Produto?          @relation("ProdutoImportacaoItens", fields: [produtoId], references: [id])

  @@index([importacaoId], map: "idx_importacao_item_importacao")
  @@index([resultado], map: "idx_importacao_item_resultado")
  @@map("importacao_produto_item")
}
