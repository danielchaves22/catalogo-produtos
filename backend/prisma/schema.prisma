// backend/prisma/schema.prisma
// Schema simplificado sem referências a schemas específicos

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

// Modelos simplificados sem referências a schemas

model User {
  id        Int      @id @map("idv32")
  email     String   @unique @map("username")
  password  String   @map("senha")
  name      String   @map("nomecompleto")

  subUsuarios SubUsuario[]
  operadoresEstrangeiros OperadorEstrangeiro[]

  @@map("comex")
}

model SubUsuario {
  id          Int   @id @default(autoincrement()) @map("Id")
  superUserId Int   @map("idv32_comex")
  email       String @unique @map("email")
  password    String @map("senha")

  superUser   User  @relation(fields: [superUserId], references: [id])

  @@map("comex_subsessoes")
}

enum Role {
  ADMIN
  SUPERUSER
  USER
}

enum CatalogoStatus {
  ATIVO
  INATIVO
}

model Catalogo {
  id               Int            @id @default(autoincrement()) @map("id")
  nome             String         @map("nome")
  cpf_cnpj         String?        @map("cpf_cnpj")
  ultima_alteracao DateTime       @map("ultima_alteracao")
  numero           Int            @map("numero")
  status           CatalogoStatus @map("status")
  superUserId      Int            @map("super_user_id")
  produtos         Produto[]

  @@map("catalogo")
}

model Pais {
  codigo String @id @map("codigo")
  sigla  String @map("sigla")
  nome   String @map("nome")
  
  // Relacionamentos
  operadoresEstrangeiros OperadorEstrangeiro[]
  operadoresEstrangeiroProdutos OperadorEstrangeiroProduto[] @relation("PaisOperadorProduto")
  subdivisoes Subdivisao[] // Adicionado relacionamento com subdivisões
  
  @@map("pais")
}

model AgenciaEmissora {
  codigo String @id @map("codigo")
  sigla  String @map("sigla")
  nome   String @map("nome")
  
  // Relacionamentos
  identificacoesAdicionais IdentificacaoAdicional[]
  
  @@map("agencia_emissora")
}

model Subdivisao {
  codigo String @id @map("codigo")
  sigla  String @map("sigla")
  nome   String @map("nome")
  paisCodigo String @map("pais_codigo") // Adicionado vínculo com país
  
  // Relacionamentos
  pais Pais @relation(fields: [paisCodigo], references: [codigo])
  operadoresEstrangeiros OperadorEstrangeiro[]
  
  @@map("subdivisao")
}

// Tabela principal do Operador Estrangeiro
model OperadorEstrangeiro {
  id                     Int      @id @default(autoincrement()) @map("id")
  cnpjRaizResponsavel    String   @map("cnpj_raiz_responsavel")
  superUserId            Int      @map("super_user_id")

  superUser              User     @relation(fields: [superUserId], references: [id])
  
  // Dados básicos
  paisCodigo             String   @map("pais_codigo")
  tin                    String?  @map("tin") // Número de identificação (TIN)
  nome                   String   @map("nome")
  email                  String?  @map("email")
  codigoInterno          String?  @map("codigo_interno")
  
  // Endereço
  codigoPostal           String?  @map("codigo_postal")
  logradouro             String?  @map("logradouro")
  cidade                 String?  @map("cidade")
  subdivisaoCodigo       String?  @map("subdivisao_codigo")
  
  // Controle do sistema
  codigo                 String?  @map("codigo") // Código gerado pelo SISCOMEX
  versao                 Int      @default(1) @map("versao")
  situacao               OperadorEstrangeiroStatus @default(ATIVO) @map("situacao")
  dataInclusao           DateTime @default(now()) @map("data_inclusao")
  dataUltimaAlteracao    DateTime @updatedAt @map("data_ultima_alteracao")
  dataReferencia         DateTime? @map("data_referencia") // Para inclusão retroativa
  
  // Relacionamentos
  pais                   Pais     @relation(fields: [paisCodigo], references: [codigo])
  subdivisao             Subdivisao? @relation(fields: [subdivisaoCodigo], references: [codigo])
  identificacoesAdicionais IdentificacaoAdicional[]
  operadorEstrangeiroProdutos OperadorEstrangeiroProduto[] @relation("OperadorProduto")

  @@index([superUserId], name: "idx_super_user_id")
  @@map("operador_estrangeiro")
}

// Tabela para identificações adicionais (DUNS, LEI, etc.)
model IdentificacaoAdicional {
  id                     Int      @id @default(autoincrement()) @map("id")
  operadorEstrangeiroId  Int      @map("operador_estrangeiro_id")
  numero                 String   @map("numero")
  agenciaEmissoraCodigo  String   @map("agencia_emissora_codigo")
  
  // Relacionamentos
  operadorEstrangeiro    OperadorEstrangeiro @relation(fields: [operadorEstrangeiroId], references: [id], onDelete: Cascade)
  agenciaEmissora        AgenciaEmissora @relation(fields: [agenciaEmissoraCodigo], references: [codigo])
  
  @@map("identificacao_adicional")
}

enum OperadorEstrangeiroStatus {
  ATIVO
  INATIVO
  DESATIVADO
}
// Enum de status de Produto
enum ProdutoStatus {
  PENDENTE
  APROVADO
  PROCESSANDO
  TRANSMITIDO
  ERRO
}

enum ProdutoSituacao {
  RASCUNHO
  ATIVADO
  DESATIVADO
}

// Tabela de cache de NCM
model NcmCache {
  id                   Int      @id @default(autoincrement()) @map("id")
  codigo               String   @unique @map("codigo")
  descricao            String?  @map("descricao")
  dataUltimaSincronizacao DateTime? @map("data_ultima_sincronizacao")
  hashEstrutura        String?  @map("hash_estrutura")
  versaoEstrutura      Int?     @map("versao_estrutura")
  unidadeMedida        String?  @map("unidade_medida")
  aliquotaIi           Decimal? @map("aliquota_ii")
  atributos            AtributosCache[] @relation("NcmAtributos")

  @@map("ncm_cache")
}

// Tabela de cache das estruturas de atributos
model AtributosCache {
  id                 Int      @id @default(autoincrement()) @map("id")
  ncmCodigo          String   @map("ncm_codigo")
  modalidade         String   @map("modalidade")
  estruturaJson      Json     @map("estrutura_json")
  dataSincronizacao  DateTime? @map("data_sincronizacao")
  versao             Int?     @map("versao")
  hashEstrutura      String?  @map("hash_estrutura")
  vigenciaInicio     DateTime? @map("vigencia_inicio")
  vigenciaFim        DateTime? @map("vigencia_fim")
  ncm                NcmCache @relation("NcmAtributos", fields: [ncmCodigo], references: [codigo])

  @@unique([ncmCodigo, modalidade, versao], name: "uk_ncm_modalidade_versao")
  @@map("atributos_cache")
}

// Tabela de produtos
model Produto {
  id                        Int               @id @default(autoincrement()) @map("id")
  codigo                    String?           @unique @map("codigo")
  versao                    Int               @map("versao")
  status                    ProdutoStatus     @map("status")
  situacao                 ProdutoSituacao    @default(RASCUNHO) @map("situacao")
  ncmCodigo                 String            @map("ncm_codigo")
  modalidade                String?           @map("modalidade")
  denominacao               String            @map("denominacao")
  descricao                 String            @map("descricao")
  catalogoId                Int               @map("catalogo_id")
  catalogo                  Catalogo          @relation(fields: [catalogoId], references: [id])
  criadoEm                  DateTime          @default(now()) @map("criado_em")
  atualizadoEm              DateTime          @updatedAt @map("atualizado_em")
  criadoPor                 String?           @map("criado_por")
  versaoEstruturaAtributos  Int?              @map("versao_estrutura_atributos")
  atributos                 ProdutoAtributos[]
  codigosInternos           CodigoInternoProduto[]
  operadoresEstrangeiros    OperadorEstrangeiroProduto[]

  @@index([ncmCodigo], name: "idx_ncm")
  @@index([catalogoId], name: "idx_catalogo")
  @@unique([codigo, versao], name: "uk_codigo_versao")
  @@map("produto")
}

// Tabela com valores de atributos dos produtos
model ProdutoAtributos {
  id                    Int       @id @default(autoincrement()) @map("id")
  produtoId             Int       @map("produto_id")
  valoresJson           Json      @map("valores_json")
  estruturaSnapshotJson Json?     @map("estrutura_snapshot_json")
  validadoEm            DateTime? @map("validado_em")
  errosValidacao        Json?     @map("erros_validacao")
  produto               Produto   @relation(fields: [produtoId], references: [id])

  @@map("produto_atributos")
}

model CodigoInternoProduto {
  id        Int     @id @default(autoincrement()) @map("id")
  produtoId Int     @map("produto_id")
  codigo    String  @map("codigo")
  produto   Produto @relation(fields: [produtoId], references: [id], onDelete: Cascade)

  @@unique([produtoId, codigo], name: "uk_produto_codigo")
  @@map("codigo_interno_produto")
}

model OperadorEstrangeiroProduto {
  id                    Int     @id @default(autoincrement()) @map("id")
  paisCodigo            String  @map("pais_codigo")
  conhecido             Boolean @map("conhecido")
  operadorEstrangeiroId Int?    @map("operador_estrangeiro_id")
  produtoId             Int     @map("produto_id")

  pais                  Pais                  @relation("PaisOperadorProduto", fields: [paisCodigo], references: [codigo])
  operadorEstrangeiro   OperadorEstrangeiro?  @relation("OperadorProduto", fields: [operadorEstrangeiroId], references: [id])
  produto               Produto               @relation(fields: [produtoId], references: [id], onDelete: Cascade)

  @@map("operador_estrangeiro_produto")
}
