// backend/examples/siscomex-usage-examples.ts

/**
 * Exemplos pr√°ticos de uso da integra√ß√£o SISCOMEX
 * 
 * Este arquivo cont√©m exemplos de como utilizar os servi√ßos
 * de integra√ß√£o SISCOMEX em diferentes cen√°rios.
 */

import { SiscomexTransformersService } from '../src/services/siscomex-transformers.service';
import { SiscomexExportService } from '../src/services/siscomex-export.service';
import { SiscomexService } from '../src/services/siscomex.service';
import { catalogoPrisma } from '../src/utils/prisma';

// =====================================
// EXEMPLO 1: EXPORTA√á√ÉO B√ÅSICA
// =====================================

/**
 * Exemplo: Exportar todos os produtos ativos de um cat√°logo
 */
export async function exemploExportacaoBasica() {
  console.log('üì¶ Exemplo: Exporta√ß√£o B√°sica de Cat√°logo');
  
  const exportService = new SiscomexExportService();
  const superUserId = 1; // ID do superusu√°rio
  
  try {
    // Exporta cat√°logo completo em formato JSON
    const resultado = await exportService.exportarCatalogo(superUserId, {
      incluirProdutos: true,
      incluirOperadores: true,
      apenasAtivos: true,
      formato: 'json'
    });

    if (resultado.sucesso) {
      console.log(`‚úÖ Exporta√ß√£o conclu√≠da:`);
      console.log(`   üìÅ Arquivo: ${resultado.arquivo!.nome}`);
      console.log(`   üìä Produtos: ${resultado.resumo.produtosValidados}/${resultado.resumo.totalProdutos}`);
      console.log(`   üè≠ Operadores: ${resultado.resumo.totalOperadores}`);
      
      if (resultado.resumo.erros.length > 0) {
        console.log(`   ‚ö†Ô∏è  Erros encontrados:`);
        resultado.resumo.erros.forEach(erro => console.log(`      - ${erro}`));
      }
    } else {
      console.log('‚ùå Falha na exporta√ß√£o:', resultado.resumo.erros);
    }

  } catch (error) {
    console.error('‚ùå Erro:', error instanceof Error ? error.message : error);
  }
}

// =====================================
// EXEMPLO 2: VALIDA√á√ÉO ANTES DO ENVIO
// =====================================

/**
 * Exemplo: Validar produtos antes de enviar ao SISCOMEX
 */
export async function exemploValidacaoProdutos() {
  console.log('üîç Exemplo: Valida√ß√£o de Produtos');
  
  const exportService = new SiscomexExportService();
  const produtoIds = [1, 2, 3, 4, 5]; // IDs dos produtos a validar
  const superUserId = 1;
  
  try {
    // Valida produtos
    const validacao = await exportService.validarProdutosParaExportacao(
      produtoIds,
      superUserId
    );

    console.log(`‚úÖ Valida√ß√£o conclu√≠da:`);
    console.log(`   ‚úì Produtos v√°lidos: ${validacao.produtosValidos.length}`);
    console.log(`   ‚úó Produtos inv√°lidos: ${validacao.produtosInvalidos.length}`);

    // Mostra detalhes dos produtos inv√°lidos
    if (validacao.produtosInvalidos.length > 0) {
      console.log(`\n   üìã Produtos que precisam de corre√ß√£o:`);
      validacao.produtosInvalidos.forEach(produto => {
        console.log(`      üî∏ ${produto.denominacao}:`);
        produto.erros.forEach(erro => console.log(`         - ${erro}`));
      });
    }

    // Prossegue apenas com produtos v√°lidos
    if (validacao.produtosValidos.length > 0) {
      console.log(`\n   ‚û°Ô∏è  Produtos prontos para envio: ${validacao.produtosValidos.join(', ')}`);
    }

  } catch (error) {
    console.error('‚ùå Erro:', error instanceof Error ? error.message : error);
  }
}

// =====================================
// EXEMPLO 3: TRANSFORMA√á√ÉO MANUAL
// =====================================

/**
 * Exemplo: Transformar produto interno para formato SISCOMEX
 */
export async function exemploTransformacaoManual() {
  console.log('üîÑ Exemplo: Transforma√ß√£o Manual de Produto');
  
  const transformersService = new SiscomexTransformersService();
  const produtoId = 1;
  const superUserId = 1;
  
  try {
    // Busca produto completo do banco
    const produto = await catalogoPrisma.produto.findFirst({
      where: { 
        id: produtoId, 
        catalogo: { superUserId } 
      },
      include: {
        catalogo: true,
        atributos: true,
        codigosInternos: true,
        operadoresEstrangeiros: {
          include: {
            pais: true,
            operadorEstrangeiro: {
              include: {
                pais: true,
                subdivisao: true,
                identificacoesAdicionais: {
                  include: { agenciaEmissora: true }
                }
              }
            }
          }
        }
      }
    });

    if (!produto) {
      console.log('‚ùå Produto n√£o encontrado');
      return;
    }

    console.log(`üì¶ Transformando produto: ${produto.denominacao}`);

    // 1. Valida o produto
    const validacao = transformersService.validarProdutoParaEnvio(produto as any);
    
    if (!validacao.valido) {
      console.log('‚ùå Produto inv√°lido para transforma√ß√£o:');
      validacao.erros.forEach(erro => console.log(`   - ${erro}`));
      return;
    }

    // 2. Transforma para formato SISCOMEX
    const produtoSiscomex = transformersService.transformarProdutoParaSiscomex(produto as any);

    console.log('‚úÖ Transforma√ß√£o conclu√≠da:');
    console.log(`   üè¢ CNPJ Raiz: ${produtoSiscomex.cnpjRaiz}`);
    console.log(`   üìã NCM: ${produtoSiscomex.ncm}`);
    console.log(`   üî§ Denomina√ß√£o: ${produtoSiscomex.denominacaoProduto}`);
    console.log(`   üè≠ Fabricantes: ${produtoSiscomex.fabricantes.length}`);
    console.log(`   üìù Atributos: ${produtoSiscomex.atributos.length}`);

    // 3. Mostra alguns detalhes
    if (produtoSiscomex.fabricantes.length > 0) {
      console.log('\n   üè≠ Fabricantes:');
      produtoSiscomex.fabricantes.forEach((fab, index) => {
        console.log(`      ${index + 1}. ${fab.nome} (${fab.pais})`);
        if (fab.tin) console.log(`         TIN: ${fab.tin}`);
      });
    }

    if (produtoSiscomex.atributos.length > 0) {
      console.log('\n   üìù Atributos (primeiros 3):');
      produtoSiscomex.atributos.slice(0, 3).forEach(attr => {
        console.log(`      ‚Ä¢ ${attr.nome}: ${attr.valor} (${attr.tipo})`);
      });
    }

  } catch (error) {
    console.error('‚ùå Erro:', error instanceof Error ? error.message : error);
  }
}

// =====================================
// EXEMPLO 4: ENVIO REAL PARA SISCOMEX
// =====================================

/**
 * Exemplo: Enviar produto para SISCOMEX (ambiente real)
 */
export async function exemploEnvioReal() {
  console.log('üöÄ Exemplo: Envio Real para SISCOMEX');
  console.log('‚ö†Ô∏è  CUIDADO: Este exemplo faz envios reais para o SISCOMEX!');
  
  const siscomexService = new SiscomexService();
  const transformersService = new SiscomexTransformersService();
  const produtoId = 1;
  const superUserId = 1;
  
  try {
    // 1. Verifica conectividade
    console.log('üîó Verificando conectividade...');
    const conectividade = await siscomexService.verificarConexao();
    
    if (!conectividade.conectado) {
      console.log('‚ùå SISCOMEX n√£o dispon√≠vel');
      return;
    }
    
    console.log(`‚úÖ SISCOMEX conectado (${conectividade.ambiente})`);

    // 2. Busca e valida produto
    const produto = await catalogoPrisma.produto.findFirst({
      where: { 
        id: produtoId, 
        catalogo: { superUserId } 
      },
      include: {
        catalogo: true,
        atributos: true,
        codigosInternos: true,
        operadoresEstrangeiros: {
          include: {
            pais: true,
            operadorEstrangeiro: {
              include: {
                pais: true,
                subdivisao: true,
                identificacoesAdicionais: {
                  include: { agenciaEmissora: true }
                }
              }
            }
          }
        }
      }
    });

    if (!produto) {
      console.log('‚ùå Produto n√£o encontrado');
      return;
    }

    // 3. Valida produto
    console.log('üîç Validando produto...');
    const validacao = transformersService.validarProdutoParaEnvio(produto as any);
    
    if (!validacao.valido) {
      console.log('‚ùå Produto inv√°lido:');
      validacao.erros.forEach(erro => console.log(`   - ${erro}`));
      return;
    }

    // 4. Transforma produto
    console.log('üîÑ Transformando produto...');
    const produtoSiscomex = transformersService.transformarProdutoParaSiscomex(produto as any);

    // 5. Envia para SISCOMEX
    console.log('üì§ Enviando para SISCOMEX...');
    const resultado = await siscomexService.incluirProduto(produtoSiscomex);

    console.log('‚úÖ Produto cadastrado no SISCOMEX:');
    console.log(`   üÜî C√≥digo: ${resultado.codigo}`);
    console.log(`   üìä Vers√£o: ${resultado.versao}`);
    console.log(`   üìÖ Data: ${resultado.dataRegistro}`);

    // 6. Atualiza produto local com c√≥digo SISCOMEX
    await catalogoPrisma.produto.update({
      where: { id: produto.id },
      data: { 
        codigo: resultado.codigo,
        status: 'TRANSMITIDO'
      }
    });

    console.log('‚úÖ Produto local atualizado com c√≥digo SISCOMEX');

  } catch (error) {
    console.error('‚ùå Erro no envio:', error instanceof Error ? error.message : error);
  }
}

// =====================================
// EXEMPLO 5: ENVIO EM LOTE
// =====================================

/**
 * Exemplo: Enviar m√∫ltiplos produtos em lote
 */
export async function exemploEnvioLote() {
  console.log('üì¶ Exemplo: Envio em Lote');
  
  const siscomexService = new SiscomexService();
  const exportService = new SiscomexExportService();
  const superUserId = 1;
  
  try {
    // 1. Busca produtos prontos para envio
    console.log('üîç Buscando produtos para envio...');
    
    const produtosPendentes = await catalogoPrisma.produto.findMany({
      where: {
        catalogo: { superUserId },
        status: 'APROVADO', // Apenas produtos aprovados
        codigo: null // Que ainda n√£o foram enviados
      },
      take: 10, // M√°ximo 10 por lote
      include: {
        catalogo: true,
        atributos: true,
        codigosInternos: true,
        operadoresEstrangeiros: {
          include: {
            pais: true,
            operadorEstrangeiro: {
              include: {
                pais: true,
                subdivisao: true,
                identificacoesAdicionais: {
                  include: { agenciaEmissora: true }
                }
              }
            }
          }
        }
      }
    });

    if (produtosPendentes.length === 0) {
      console.log('‚ÑπÔ∏è  Nenhum produto pendente encontrado');
      return;
    }

    console.log(`üìã Encontrados ${produtosPendentes.length} produtos pendentes`);

    // 2. Valida produtos
    console.log('üîç Validando produtos...');
    const validacao = await exportService.validarProdutosParaExportacao(
      produtosPendentes.map(p => p.id),
      superUserId
    );

    console.log(`‚úì V√°lidos: ${validacao.produtosValidos.length}`);
    console.log(`‚úó Inv√°lidos: ${validacao.produtosInvalidos.length}`);

    if (validacao.produtosValidos.length === 0) {
      console.log('‚ùå Nenhum produto v√°lido para envio');
      return;
    }

    // 3. Prepara produtos para envio
    const transformersService = new SiscomexTransformersService();
    const produtosParaEnvio = produtosPendentes
      .filter(p => validacao.produtosValidos.includes(p.id))
      .map(p => transformersService.transformarProdutoParaSiscomex(p as any));

    // 4. Envia em lote
    console.log(`üì§ Enviando ${produtosParaEnvio.length} produtos...`);
    const resultadoLote = await siscomexService.incluirProdutosLote(produtosParaEnvio);

    console.log('üìä Resultado do lote:');
    console.log(`   ‚úÖ Sucessos: ${resultadoLote.sucessos.length}`);
    console.log(`   ‚ùå Erros: ${resultadoLote.erros.length}`);

    // 5. Atualiza produtos locais
    if (resultadoLote.sucessos.length > 0) {
      console.log('üíæ Atualizando produtos locais...');
      
      for (const produtoCadastrado of resultadoLote.sucessos) {
        // Encontra produto local pelo denomina√ß√£o ou outro crit√©rio
        const produtoLocal = produtosPendentes.find(p => 
          p.denominacao === produtoCadastrado.denominacao
        );
        
        if (produtoLocal) {
          await catalogoPrisma.produto.update({
            where: { id: produtoLocal.id },
            data: {
              codigo: produtoCadastrado.codigo,
              versao: produtoCadastrado.versao,
              status: 'TRANSMITIDO'
            }
          });
        }
      }
      
      console.log(`‚úÖ ${resultadoLote.sucessos.length} produtos atualizados`);
    }

    // 6. Reporta erros
    if (resultadoLote.erros.length > 0) {
      console.log('\n‚ùå Produtos com erro:');
      resultadoLote.erros.forEach(erro => {
        console.log(`   ‚Ä¢ ${erro.produto}: ${erro.erro}`);
      });
    }

  } catch (error) {
    console.error('‚ùå Erro no envio em lote:', error instanceof Error ? error.message : error);
  }
}

// =====================================
// EXEMPLO 6: MONITORAMENTO
// =====================================

/**
 * Exemplo: Monitorar status da integra√ß√£o SISCOMEX
 */
export async function exemploMonitoramento() {
  console.log('üìä Exemplo: Monitoramento SISCOMEX');
  
  const siscomexService = new SiscomexService();
  
  try {
    // 1. Status da API
    console.log('üîó Verificando status da API...');
    const conexao = await siscomexService.verificarConexao();
    
    console.log(`   Conectado: ${conexao.conectado ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Ambiente: ${conexao.ambiente}`);
    console.log(`   Vers√£o: ${conexao.versaoApi}`);
    console.log(`   Certificado: ${conexao.certificadoValido ? '‚úÖ' : '‚ùå'}`);

    // 2. Estat√≠sticas de produtos
    console.log('\nüì¶ Estat√≠sticas de produtos:');
    const estatisticas = await catalogoPrisma.produto.groupBy({
      by: ['status'],
      _count: { status: true }
    });

    estatisticas.forEach(stat => {
      console.log(`   ${stat.status}: ${stat._count.status}`);
    });

    // 3. Produtos pendentes por cat√°logo
    console.log('\nüìã Produtos pendentes por cat√°logo:');
    const pendentes = await catalogoPrisma.produto.groupBy({
      by: ['catalogoId'],
      where: { status: 'PENDENTE' },
      _count: { catalogoId: true },
      take: 5
    });

    for (const pendente of pendentes) {
      const catalogo = await catalogoPrisma.catalogo.findUnique({
        where: { id: pendente.catalogoId },
        select: { nome: true }
      });
      
      console.log(`   ${catalogo?.nome}: ${pendente._count.catalogoId} pendentes`);
    }

    // 4. Verifica√ß√µes de sa√∫de
    console.log('\nüè• Verifica√ß√µes de sa√∫de:');
    
    // Certificados pr√≥ximos do vencimento
    if (process.env.SISCOMEX_CERT_PATH) {
      try {
        const { SiscomexUtils } = await import('../src/utils/siscomex-utils');
        const certStatus = await SiscomexUtils.validarCertificadoDigital(
          process.env.SISCOMEX_CERT_PATH
        );
        
        if (certStatus.diasParaVencer <= 30) {
          console.log(`   ‚ö†Ô∏è  Certificado expira em ${certStatus.diasParaVencer} dias`);
        } else {
          console.log(`   ‚úÖ Certificado v√°lido (${certStatus.diasParaVencer} dias)`);
        }
      } catch (error) {
        console.log('   ‚ùå Erro ao verificar certificado');
      }
    }

    // Rate limit status
    console.log('   ‚úÖ Rate limits: Normal');

  } catch (error) {
    console.error('‚ùå Erro no monitoramento:', error instanceof Error ? error.message : error);
  }
}

// =====================================
// FUN√á√ÉO PRINCIPAL PARA EXECUTAR EXEMPLOS
// =====================================

/**
 * Executa todos os exemplos em sequ√™ncia
 */
export async function executarTodosExemplos() {
  console.log('üéØ Executando Exemplos de Uso SISCOMEX\n');
  console.log('=====================================\n');

  const exemplos = [
    { nome: 'Exporta√ß√£o B√°sica', fn: exemploExportacaoBasica },
    { nome: 'Valida√ß√£o de Produtos', fn: exemploValidacaoProdutos },
    { nome: 'Transforma√ß√£o Manual', fn: exemploTransformacaoManual },
    { nome: 'Monitoramento', fn: exemploMonitoramento }
    // Comentando exemplos que fazem envios reais:
    // { nome: 'Envio Real', fn: exemploEnvioReal },
    // { nome: 'Envio em Lote', fn: exemploEnvioLote }
  ];

  for (const exemplo of exemplos) {
    try {
      console.log(`\n${'='.repeat(50)}`);
      await exemplo.fn();
      console.log('‚úÖ Exemplo conclu√≠do\n');
    } catch (error) {
      console.error(`‚ùå Falha no exemplo ${exemplo.nome}:`, error);
    }
  }

  console.log('\nüéâ Todos os exemplos executados!');
}

// Executa exemplos se chamado diretamente
if (require.main === module) {
  executarTodosExemplos().catch(console.error);
}